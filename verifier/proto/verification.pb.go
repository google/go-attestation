// Code generated by protoc-gen-go. DO NOT EDIT.
// source: verification.proto

package go_attestation_verifier

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AikVerificationResults struct {
	Succeeded                   bool     `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	KeyTooSmall                 bool     `protobuf:"varint,2,opt,name=key_too_small,json=keyTooSmall,proto3" json:"key_too_small,omitempty"`
	CreationAttestationMismatch bool     `protobuf:"varint,3,opt,name=creation_attestation_mismatch,json=creationAttestationMismatch,proto3" json:"creation_attestation_mismatch,omitempty"`
	KeyNotTpmBound              bool     `protobuf:"varint,4,opt,name=key_not_tpm_bound,json=keyNotTpmBound,proto3" json:"key_not_tpm_bound,omitempty"`
	KeyUsageOverlyBroad         bool     `protobuf:"varint,5,opt,name=key_usage_overly_broad,json=keyUsageOverlyBroad,proto3" json:"key_usage_overly_broad,omitempty"`
	NameAttestationMismatch     bool     `protobuf:"varint,6,opt,name=name_attestation_mismatch,json=nameAttestationMismatch,proto3" json:"name_attestation_mismatch,omitempty"`
	SignatureMismatch           bool     `protobuf:"varint,7,opt,name=signature_mismatch,json=signatureMismatch,proto3" json:"signature_mismatch,omitempty"`
	RocaVulnerableKey           bool     `protobuf:"varint,8,opt,name=roca_vulnerable_key,json=rocaVulnerableKey,proto3" json:"roca_vulnerable_key,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *AikVerificationResults) Reset()         { *m = AikVerificationResults{} }
func (m *AikVerificationResults) String() string { return proto.CompactTextString(m) }
func (*AikVerificationResults) ProtoMessage()    {}
func (*AikVerificationResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_69b5d5d3b04d10d4, []int{0}
}

func (m *AikVerificationResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AikVerificationResults.Unmarshal(m, b)
}
func (m *AikVerificationResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AikVerificationResults.Marshal(b, m, deterministic)
}
func (m *AikVerificationResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AikVerificationResults.Merge(m, src)
}
func (m *AikVerificationResults) XXX_Size() int {
	return xxx_messageInfo_AikVerificationResults.Size(m)
}
func (m *AikVerificationResults) XXX_DiscardUnknown() {
	xxx_messageInfo_AikVerificationResults.DiscardUnknown(m)
}

var xxx_messageInfo_AikVerificationResults proto.InternalMessageInfo

func (m *AikVerificationResults) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func (m *AikVerificationResults) GetKeyTooSmall() bool {
	if m != nil {
		return m.KeyTooSmall
	}
	return false
}

func (m *AikVerificationResults) GetCreationAttestationMismatch() bool {
	if m != nil {
		return m.CreationAttestationMismatch
	}
	return false
}

func (m *AikVerificationResults) GetKeyNotTpmBound() bool {
	if m != nil {
		return m.KeyNotTpmBound
	}
	return false
}

func (m *AikVerificationResults) GetKeyUsageOverlyBroad() bool {
	if m != nil {
		return m.KeyUsageOverlyBroad
	}
	return false
}

func (m *AikVerificationResults) GetNameAttestationMismatch() bool {
	if m != nil {
		return m.NameAttestationMismatch
	}
	return false
}

func (m *AikVerificationResults) GetSignatureMismatch() bool {
	if m != nil {
		return m.SignatureMismatch
	}
	return false
}

func (m *AikVerificationResults) GetRocaVulnerableKey() bool {
	if m != nil {
		return m.RocaVulnerableKey
	}
	return false
}

type QuoteVerificationResults struct {
	Succeeded            bool     `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	SignatureMismatch    bool     `protobuf:"varint,2,opt,name=signature_mismatch,json=signatureMismatch,proto3" json:"signature_mismatch,omitempty"`
	PcrDigest            []byte   `protobuf:"bytes,3,opt,name=pcr_digest,json=pcrDigest,proto3" json:"pcr_digest,omitempty"`
	PcrDigestMismatch    bool     `protobuf:"varint,4,opt,name=pcr_digest_mismatch,json=pcrDigestMismatch,proto3" json:"pcr_digest_mismatch,omitempty"`
	NonceMismatch        bool     `protobuf:"varint,5,opt,name=nonce_mismatch,json=nonceMismatch,proto3" json:"nonce_mismatch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuoteVerificationResults) Reset()         { *m = QuoteVerificationResults{} }
func (m *QuoteVerificationResults) String() string { return proto.CompactTextString(m) }
func (*QuoteVerificationResults) ProtoMessage()    {}
func (*QuoteVerificationResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_69b5d5d3b04d10d4, []int{1}
}

func (m *QuoteVerificationResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuoteVerificationResults.Unmarshal(m, b)
}
func (m *QuoteVerificationResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuoteVerificationResults.Marshal(b, m, deterministic)
}
func (m *QuoteVerificationResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteVerificationResults.Merge(m, src)
}
func (m *QuoteVerificationResults) XXX_Size() int {
	return xxx_messageInfo_QuoteVerificationResults.Size(m)
}
func (m *QuoteVerificationResults) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteVerificationResults.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteVerificationResults proto.InternalMessageInfo

func (m *QuoteVerificationResults) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func (m *QuoteVerificationResults) GetSignatureMismatch() bool {
	if m != nil {
		return m.SignatureMismatch
	}
	return false
}

func (m *QuoteVerificationResults) GetPcrDigest() []byte {
	if m != nil {
		return m.PcrDigest
	}
	return nil
}

func (m *QuoteVerificationResults) GetPcrDigestMismatch() bool {
	if m != nil {
		return m.PcrDigestMismatch
	}
	return false
}

func (m *QuoteVerificationResults) GetNonceMismatch() bool {
	if m != nil {
		return m.NonceMismatch
	}
	return false
}

type EkcertVerificationResults struct {
	Succeeded            bool                                     `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	ChainVerified        bool                                     `protobuf:"varint,2,opt,name=chain_verified,json=chainVerified,proto3" json:"chain_verified,omitempty"`
	Chain                []*EkcertVerificationResults_CertSummary `protobuf:"bytes,3,rep,name=chain,proto3" json:"chain,omitempty"`
	VerificationError    string                                   `protobuf:"bytes,4,opt,name=verification_error,json=verificationError,proto3" json:"verification_error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *EkcertVerificationResults) Reset()         { *m = EkcertVerificationResults{} }
func (m *EkcertVerificationResults) String() string { return proto.CompactTextString(m) }
func (*EkcertVerificationResults) ProtoMessage()    {}
func (*EkcertVerificationResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_69b5d5d3b04d10d4, []int{2}
}

func (m *EkcertVerificationResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EkcertVerificationResults.Unmarshal(m, b)
}
func (m *EkcertVerificationResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EkcertVerificationResults.Marshal(b, m, deterministic)
}
func (m *EkcertVerificationResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EkcertVerificationResults.Merge(m, src)
}
func (m *EkcertVerificationResults) XXX_Size() int {
	return xxx_messageInfo_EkcertVerificationResults.Size(m)
}
func (m *EkcertVerificationResults) XXX_DiscardUnknown() {
	xxx_messageInfo_EkcertVerificationResults.DiscardUnknown(m)
}

var xxx_messageInfo_EkcertVerificationResults proto.InternalMessageInfo

func (m *EkcertVerificationResults) GetSucceeded() bool {
	if m != nil {
		return m.Succeeded
	}
	return false
}

func (m *EkcertVerificationResults) GetChainVerified() bool {
	if m != nil {
		return m.ChainVerified
	}
	return false
}

func (m *EkcertVerificationResults) GetChain() []*EkcertVerificationResults_CertSummary {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *EkcertVerificationResults) GetVerificationError() string {
	if m != nil {
		return m.VerificationError
	}
	return ""
}

type EkcertVerificationResults_CertSummary struct {
	IssuerCn             string   `protobuf:"bytes,1,opt,name=issuer_cn,json=issuerCn,proto3" json:"issuer_cn,omitempty"`
	IssuerOrg            string   `protobuf:"bytes,2,opt,name=issuer_org,json=issuerOrg,proto3" json:"issuer_org,omitempty"`
	Serial               string   `protobuf:"bytes,3,opt,name=serial,proto3" json:"serial,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EkcertVerificationResults_CertSummary) Reset()         { *m = EkcertVerificationResults_CertSummary{} }
func (m *EkcertVerificationResults_CertSummary) String() string { return proto.CompactTextString(m) }
func (*EkcertVerificationResults_CertSummary) ProtoMessage()    {}
func (*EkcertVerificationResults_CertSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_69b5d5d3b04d10d4, []int{2, 0}
}

func (m *EkcertVerificationResults_CertSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EkcertVerificationResults_CertSummary.Unmarshal(m, b)
}
func (m *EkcertVerificationResults_CertSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EkcertVerificationResults_CertSummary.Marshal(b, m, deterministic)
}
func (m *EkcertVerificationResults_CertSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EkcertVerificationResults_CertSummary.Merge(m, src)
}
func (m *EkcertVerificationResults_CertSummary) XXX_Size() int {
	return xxx_messageInfo_EkcertVerificationResults_CertSummary.Size(m)
}
func (m *EkcertVerificationResults_CertSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_EkcertVerificationResults_CertSummary.DiscardUnknown(m)
}

var xxx_messageInfo_EkcertVerificationResults_CertSummary proto.InternalMessageInfo

func (m *EkcertVerificationResults_CertSummary) GetIssuerCn() string {
	if m != nil {
		return m.IssuerCn
	}
	return ""
}

func (m *EkcertVerificationResults_CertSummary) GetIssuerOrg() string {
	if m != nil {
		return m.IssuerOrg
	}
	return ""
}

func (m *EkcertVerificationResults_CertSummary) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func init() {
	proto.RegisterType((*AikVerificationResults)(nil), "go_attestation.verifier.AikVerificationResults")
	proto.RegisterType((*QuoteVerificationResults)(nil), "go_attestation.verifier.QuoteVerificationResults")
	proto.RegisterType((*EkcertVerificationResults)(nil), "go_attestation.verifier.EkcertVerificationResults")
	proto.RegisterType((*EkcertVerificationResults_CertSummary)(nil), "go_attestation.verifier.EkcertVerificationResults.CertSummary")
}

func init() { proto.RegisterFile("verification.proto", fileDescriptor_69b5d5d3b04d10d4) }

var fileDescriptor_69b5d5d3b04d10d4 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x6e, 0xdb, 0x3c,
	0x10, 0x85, 0x61, 0xfb, 0x8f, 0x7f, 0x6b, 0x5c, 0x1b, 0x30, 0x03, 0x38, 0x4a, 0xd3, 0x00, 0x81,
	0x81, 0x00, 0xe9, 0xa2, 0x5e, 0x34, 0xbb, 0x2e, 0x0a, 0xc4, 0x69, 0x56, 0x45, 0x1b, 0x54, 0x71,
	0xbd, 0x25, 0x68, 0x6a, 0xaa, 0x08, 0x92, 0x48, 0x63, 0x48, 0x19, 0xd0, 0x51, 0x7a, 0xa3, 0x5e,
	0xa2, 0x77, 0x29, 0x48, 0x29, 0xb6, 0x16, 0xf6, 0x22, 0x4b, 0xbd, 0xf7, 0xcd, 0x70, 0x86, 0x4f,
	0x04, 0xb6, 0x45, 0x4a, 0x7f, 0xa5, 0x52, 0xd8, 0x54, 0xab, 0xf9, 0x86, 0xb4, 0xd5, 0xec, 0x2c,
	0xd1, 0x5c, 0x58, 0x8b, 0xc6, 0xd6, 0x6a, 0x8d, 0x20, 0xcd, 0x7e, 0xf7, 0x60, 0x7a, 0x97, 0x66,
	0xab, 0x56, 0x49, 0x84, 0xa6, 0xcc, 0xad, 0x61, 0xef, 0x20, 0x30, 0xa5, 0x94, 0x88, 0x31, 0xc6,
	0x61, 0xe7, 0xaa, 0x73, 0x33, 0x88, 0xf6, 0x02, 0x9b, 0xc1, 0x28, 0xc3, 0x8a, 0x5b, 0xad, 0xb9,
	0x29, 0x44, 0x9e, 0x87, 0x5d, 0x4f, 0x0c, 0x33, 0xac, 0x96, 0x5a, 0x3f, 0x39, 0x89, 0x2d, 0xe0,
	0x52, 0x12, 0xfa, 0xa6, 0xed, 0xd3, 0x79, 0x91, 0x9a, 0x42, 0x58, 0xf9, 0x1c, 0xf6, 0x7c, 0xcd,
	0xc5, 0x0b, 0x74, 0xb7, 0x67, 0xbe, 0x35, 0x08, 0x7b, 0x0f, 0x13, 0x77, 0x8e, 0xd2, 0x96, 0xdb,
	0x4d, 0xc1, 0xd7, 0xba, 0x54, 0x71, 0xf8, 0x9f, 0xaf, 0x1b, 0x67, 0x58, 0x7d, 0xd7, 0x76, 0xb9,
	0x29, 0x16, 0x4e, 0x65, 0xb7, 0x30, 0x75, 0x68, 0x69, 0x44, 0x82, 0x5c, 0x6f, 0x91, 0xf2, 0x8a,
	0xaf, 0x49, 0x8b, 0x38, 0x3c, 0xf1, 0xfc, 0x69, 0x86, 0xd5, 0x4f, 0x67, 0x3e, 0x7a, 0x6f, 0xe1,
	0x2c, 0xf6, 0x09, 0xce, 0x95, 0x28, 0xf0, 0xf0, 0x7c, 0x7d, 0x5f, 0x77, 0xe6, 0x80, 0x43, 0xb3,
	0x7d, 0x00, 0x66, 0xd2, 0x44, 0x09, 0x5b, 0x12, 0xee, 0x8b, 0xfe, 0xf7, 0x45, 0x93, 0x9d, 0xb3,
	0xc3, 0xe7, 0x70, 0x4a, 0x5a, 0x0a, 0xbe, 0x2d, 0x73, 0x85, 0x24, 0xd6, 0x39, 0xf2, 0x0c, 0xab,
	0x70, 0x50, 0xf3, 0xce, 0x5a, 0xed, 0x9c, 0xaf, 0x58, 0xcd, 0xfe, 0x76, 0x20, 0xfc, 0x51, 0x6a,
	0x8b, 0xaf, 0x4f, 0xe7, 0xf0, 0x64, 0xdd, 0x63, 0x93, 0x5d, 0x02, 0x6c, 0x24, 0xf1, 0x38, 0x4d,
	0xd0, 0x58, 0x9f, 0xca, 0x9b, 0x28, 0xd8, 0x48, 0xfa, 0xe2, 0x05, 0x37, 0xf8, 0xde, 0xde, 0xb7,
	0xab, 0x53, 0x98, 0xec, 0xb8, 0x5d, 0xbb, 0x6b, 0x18, 0x2b, 0xad, 0x64, 0xeb, 0xe4, 0x3a, 0x80,
	0x91, 0x57, 0x5f, 0xb0, 0xd9, 0x9f, 0x2e, 0x9c, 0x3f, 0x64, 0x12, 0xc9, 0xbe, 0x7e, 0xc1, 0x6b,
	0x18, 0xcb, 0x67, 0x91, 0x2a, 0xde, 0xfc, 0xc9, 0x71, 0xb3, 0xdc, 0xc8, 0xab, 0xab, 0x46, 0x64,
	0x4b, 0x38, 0xf1, 0x42, 0xd8, 0xbb, 0xea, 0xdd, 0x0c, 0x3f, 0x7e, 0x9e, 0x1f, 0x79, 0x07, 0xf3,
	0xa3, 0x73, 0xcc, 0xef, 0x91, 0xec, 0x53, 0x59, 0x14, 0x82, 0xaa, 0xa8, 0x6e, 0xe6, 0x6e, 0xb7,
	0xfd, 0xc6, 0x38, 0x12, 0x69, 0xf2, 0xd7, 0x11, 0x44, 0x93, 0xb6, 0xf3, 0xe0, 0x8c, 0xb7, 0x02,
	0x86, 0xad, 0x26, 0xec, 0x02, 0x82, 0xd4, 0x98, 0x12, 0x89, 0x4b, 0xe5, 0x17, 0x0b, 0xa2, 0x41,
	0x2d, 0xdc, 0x2b, 0x97, 0x44, 0x63, 0x6a, 0x4a, 0xfc, 0x4e, 0x41, 0xd4, 0xe0, 0x8f, 0x94, 0xb0,
	0x29, 0xf4, 0x0d, 0x52, 0x2a, 0x72, 0x1f, 0x52, 0x10, 0x35, 0x5f, 0xeb, 0xbe, 0x7f, 0xe6, 0xb7,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x1a, 0x1f, 0x6c, 0xfc, 0x03, 0x00, 0x00,
}
